# Generated by Django 2.2.2 on 2019-07-28 05:14

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='HRTeamUser',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('firstname', models.CharField(db_column='FirstName', max_length=15)),
                ('lastname', models.CharField(db_column='LastName', max_length=15)),
                ('userid', models.CharField(db_column='UserID', max_length=8, unique=True)),
                ('password', models.CharField(db_column='Password', max_length=9)),
                ('ssn', models.CharField(db_column='SSN', max_length=11)),
                ('dob', models.DateField(db_column='DOB')),
                ('department', models.CharField(db_column='Department', max_length=20)),
                ('jobtitle', models.CharField(db_column='JobTitle', max_length=80)),
                ('accesslevel', models.CharField(db_column='AccessLevel', max_length=20)),
                ('dateofhire', models.DateField(db_column='DateOfHire')),
                ('email', models.CharField(db_column='Email', max_length=40)),
                ('address', models.CharField(db_column='Address', max_length=50)),
                ('city', models.CharField(db_column='City', max_length=15)),
                ('state', models.CharField(db_column='State', max_length=2)),
                ('zipcode', models.IntegerField(db_column='ZipCode')),
                ('phone', models.CharField(db_column='Phone', max_length=14)),
                ('cell', models.CharField(db_column='Cell', max_length=14)),
                ('is_active', models.BooleanField(db_column='Is_Active', default=True)),
            ],
            options={
                'db_table': 'HR_Dept_Team',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userid', models.CharField(db_column='User_ID', max_length=8, unique=True)),
                ('password', models.CharField(db_column='Password', max_length=140)),
                ('email', models.CharField(db_column='Email', max_length=80)),
                ('accesslevel', models.CharField(db_column='Access_Level', max_length=30)),
                ('hrgroup', models.CharField(db_column='HR_Group', max_length=80)),
                ('is_superuser', models.BooleanField(db_column='Is_SuperUser', default=False)),
                ('is_staff', models.BooleanField(db_column='Is_Staff', default=False)),
                ('is_active', models.BooleanField(db_column='Is_Active', default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
